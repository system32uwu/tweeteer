CREATE TABLE user(
  id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
  username TEXT UNIQUE NOT NULL,
  email TEXT UNIQUE NOT NULL,
  password TEXT NOT NULL,
  photoUrl TEXT DEFAULT NULL
);

CREATE TABLE post(
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  idUser INTEGER NOT NULL,
  content TEXT NOT NULL,
  createdAt datetime DEFAULT CURRENT_TIMESTAMP NOT NULL,
  updatedAt datetime DEFAULT CURRENT_TIMESTAMP NOT NULL,
  
  UNIQUE(id, idUser),
  FOREIGN KEY(idUser) REFERENCES user(id) ON DELETE CASCADE
);

CREATE TABLE likes(
  idUser INTEGER NOT NULL,
  idPost INTEGER NOT NULL,
  
  PRIMARY KEY(idUser, idPost),
  FOREIGN KEY (idUser) REFERENCES user(id) ON DELETE CASCADE,
  FOREIGN KEY (idPost) REFERENCES post(id) ON DELETE CASCADE
);

CREATE TABLE comments(
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  idUser INTEGER NOT NULL,
  idPost INTEGER NOT NULL,
  content TEXT NOT NULL,
  
  UNIQUE(id, idUser, idPost),
  FOREIGN KEY (idUser) REFERENCES user(id) ON DELETE CASCADE,
  FOREIGN KEY (idPost) REFERENCES post(id) ON DELETE CASCADE
);

CREATE TRIGGER updatePostupdatedAt_Trigger
AFTER UPDATE On post
WHEN old.content <> new.content
BEGIN
   UPDATE post SET updatedAt = CURRENT_TIMESTAMP WHERE post.id = old.id;
END;